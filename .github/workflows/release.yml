name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Base version (e.g., 1.0.0, 1.1.0)'
        required: true
        type: string
        default: '1.0.0'
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - alpha
          - beta
          - rc
          - release
      build_suffix:
        description: 'Build suffix (e.g., 1, 2, 3 for alpha.1, beta.2, etc.)'
        required: false
        type: string
        default: '1'

jobs:
  build-and-release:
    name: Build and attach to release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Declare build output variables
        id: vars
        shell: bash
        run: |
          # Get build number (total commits like open.mp)
          build_number=$(git rev-list --count HEAD)
          
          # Get base version from input
          base_version="${{ github.event.inputs.version }}"
          
          # Create tag name based on release type
          if [ "${{ github.event.inputs.release_type }}" = "release" ]; then
            tag_name="v${base_version}"
            release_name="v${base_version}.${build_number}"
            is_prerelease="false"
          else
            tag_name="v${base_version}-${{ github.event.inputs.release_type }}.${{ github.event.inputs.build_suffix }}"
            release_name="${{ github.event.inputs.release_type == 'alpha' && 'Alpha' || github.event.inputs.release_type == 'beta' && 'Beta' || 'RC' }} v${base_version}.${build_number}"
            is_prerelease="true"
          fi
          
          # Create open.mp style version: v1.0.0.2331
          full_version="v${base_version}.${build_number}"
          
          echo "build_version=${full_version}" >> $GITHUB_OUTPUT
          echo "build_number=${build_number}" >> $GITHUB_OUTPUT
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}" >> $GITHUB_OUTPUT
          echo "base_version=${base_version}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${is_prerelease}" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        env:
          PAWNCTL_VERSION: ${{ steps.vars.outputs.build_version }}
          PAWNCTL_BUILD_NUMBER: ${{ steps.vars.outputs.build_number }}
        run: npm run build
        
      - name: Build executables
        run: npm run build:executable
        
      - name: Build installer
        run: npm run build:installer
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          release_name: ${{ steps.vars.outputs.release_name }}
          body: |
            ## ${{ steps.vars.outputs.release_name }}
            
            **Release Type:** ${{ github.event.inputs.release_type }}
            **Base Version:** ${{ steps.vars.outputs.base_version }}
            **Build Number:** ${{ steps.vars.outputs.build_number }}
            
            
            ### Downloads
            
            **Windows Users:**
            - `pawnctl-setup-${{ steps.vars.outputs.build_version }}.exe` - Full installer (recommended)
            - `pawnctl-win.exe` - Standalone executable
            
            **Linux/macOS Users:**
            - `pawnctl-linux` - Linux binary  
            - `pawnctl-macos` - macOS binary
            
            Make it executable: `chmod +x pawnctl-*`
            
            ${{ steps.vars.outputs.is_prerelease == 'true' && '### ⚠️ Testing Release
            This is a testing release for development and feedback.' || '### ✅ Official Release
            This is an official stable release.' }}
            
            Report issues: https://github.com/itsneufox/pawnctl/issues
          draft: false
          prerelease: ${{ steps.vars.outputs.is_prerelease }}
          
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-installer/pawnctl-setup-1.0.0-alpha.1.exe
          asset_name: pawnctl-setup-${{ steps.vars.outputs.build_version }}.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Windows Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/pawnctl-win.exe
          asset_name: pawnctl-win.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Linux Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/pawnctl-linux
          asset_name: pawnctl-linux
          asset_content_type: application/octet-stream
          
      - name: Upload macOS Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/pawnctl-macos
          asset_name: pawnctl-macos
          asset_content_type: application/octet-stream
